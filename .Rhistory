}
sample[i] = amount
}
mean(sample)
for(i in 1:100){
juiceLeft = 50
for(j in 1:10){
x = rnorm(1, 4.5, 1.5)
juiceLeft = juiceLeft - x
}
if(juiceleft < 0){
counter = counter + 1
}
}
counter = 0
set.seed(200)
for(i in 1:100){
juiceLeft = 50
for(j in 1:10){
x = rnorm(1, 4.5, 1.5)
juiceLeft = juiceLeft - x
}
if(juiceleft < 0){
counter = counter + 1
}
}
counter
for(i in 1:100){
z = 50
for(j in 1:10){
x = rnorm(1, 4.5, 1.5)
z = z - x
}
if(z < 0){
counter = counter + 1
}
}
counter
value
value[1] = 2
value
value[3] = 5
value
value = rep(o,6)
value = rep(0,6)
value
set.seed(200)
time = rep(0,1000)
time
for(i in 1:1000){
x = runif(1, 3, 5)
y = runif(1, 0, 4)
if(x<y){
time[i] = x
}
else{
time[i] = y
}
}
mean(time)
x = rep(80, 25)
x[26] = 70
x[27] = 70
x[28] = 70
x[29] = 70
x[30] = 70
x
mean(x)
t.test(x)
x = ChickWeight
x
getOption("max.print" = 10000)
getOption("max.print" = "1000000")
options(max.print = 1000000)
x
t.test(x$Time[x$Time == 8], conf.level = 0.85)
t.test(x$weight[x$Time == 8], conf.level = 0.85)
t,test(x$weight[x$Diet == 4] - x$weight[x$Diet == 3], alternative = "greater")
t.test(x$weight[x$Diet == 4] - x$weight[x$Diet == 3], alternative = "greater")
t.test(x$weight[x$Diet == 4] - x$weight[x$Diet == 3], alternative = "lesser")
t.test(x$weight[x$Diet == 4] - x$weight[x$Diet == 3], alternative = "less")
t.test(x$weight[x$Diet==4], x$weight[x$Diet==3])
t.test(x$weight[x$Diet==4], x$weight[x$Diet==3], alternative = "less")
t.test(x$weight[x$Diet==4] - x$weight[x$Diet==3], alternative = "less")
t.test(x$weight[x$Diet==4], x$weight[x$Diet==3], alternative = "less")
mean(sample(c(2,17,22), 15, replace = TRUE, c(0.2,0.3,0.5)))
set.seed(88)
mean(sample(c(2,17,22), 15, replace = TRUE, c(0.2,0.3,0.5)))
set.seed(88)
sample(c(2,17,22), 15, replace = TRUE, c(0.2,0.3,0.5)))
x = sample(c(2,17,22), 15, replace = TRUE, c(0.2,0.3,0.5)))
set.seed(88)
x = sample(c(2,17,22), 15, replace = TRUE, c(0.2,0.3,0.5))
x
min(runif(42, 50, 88))
set.seed(29)
min(runif(42, 50, 88))
mean(c(rep(70,5), rep(80,25)))
x = c(rep(70,5), rep(80,25))
t.test(x)
x = ChickWeight
x
t.test(x$weight[x$Time==8], conf.level = 0.85)
t.test(x$weight[x$Diet==4],x$weight[x$Diet==3], alternative = "less")
set.seed(22)
min(runif(42,50,88))
(qnorm(0.975)*96/9)**2
z = (38.8-40)/(6.4/sqrt(38))
z
2 * pnorm(z)
set.seed(200)
set.seed(69)
x = rep(0,1000)
for(i in 1:1000){
y = runif(1, 5, 12)
z = runif(1, 5, 10)
x[i] = max(y,z) + runif(1, 20, 35)
}
mean(x)
x = c(50,90,70,100,75,60)
summary(x)
sd(x)
x = ChickWeight
x
length(x$weight[x$weight<150])
length(x$weight<150)
median(x$weight[x$Diet==1])
x = c(3000,100,200,300,500)
summary(x)
x = c(50,90,70,100,75,60)
summary(x)
x = c(3000,100,200,300,500)
sd(x)
x = (200,70,120,80,500)
x = c(200,70,120,80,500)
y = c(-10, 500, 10, 20, 15)
summary(x)
summary(y)
sd(x)
sd(y)
x = ChickWeight
boxplot(x$weight~x$Diet)
pnorm(1.2,1,.25)
pnorm(1.2,1,sqrt(.25))
pnorm(2)
1 - pnorm(4.45, 4.3, 0.75/sqrt(50))
pnorm(16, 17, 6/sqrt(41))
1 -pnorm(16, 17, 6/sqrt(41))
pnorm(16,17,5/sqrt(90))
4455^2
8470^2
7409^2
8932^2
9999^2
set.seed(200)
runif(6, 0, 1)
set.seed(200)
set.seed(100)
runif(6, 0, 1)
set.seed(200)
runif(6, 10, 30)
set.seed(200)
runif(3, 10, 30)
total - 0
total = 0
for(i in 1:50){
total = total + i^2
}
total
set.seed(1)
x = rep(0, 1000)
for(i in 1:1000){
x[i] = mean(rbinom(5,20,0.4))
}
hist(x)
for(i in 1:1000){
set.seed(i)
x[i] = mean(rbinom(5,20,0.4))
}
hist(x)
103+qnorm(0.95)*13/sqrt(20)
103-qnorm(0.95)*13/sqrt(20)
103-qnorm(0.995)*13/sqrt(20)
103+qnorm(0.995)*13/sqrt(20)
7000+qnorm(0.995)*400/sqrt(50)
7000-qnorm(0.995)*400/sqrt(50)
10+qnorm(0.975)*9/4
10-qnorm(0.975)*9/4
a = c(10,-15,5,20,30)
t.test(a, conf.level = 0.99)
b = c(15,13,7,25,10)
t.test(b)
t.test(b, conf.level = 0.99)
2/0.005*qnorm(0.95)
(2/0.005*qnorm(0.95))**2
((2/0.005)*qnorm(0.95))**2
(qnorm(0.995)*0.23/0.03)
(qnorm(0.995)*0.23/0.03)**2
(qnorm(0.995)*0.11/0.03)**2
read.csv(file.choose())
x = read.csv(file.choose())
x
t.test(x$score, conf.level = 0.9)
t.test(x$score, conf.level = 0.99)
10+qt(.975,15)*9/4
1-qt(.975,15)*9/4
10-qt(.975,15)*9/4
2/0.05*qnorm(0.05)
(2/0.05*qnorm(0.95))^2
set.seed(88)
sample(c(1,2,3))
set.seed(88)
sample(round(runif(3,1,3)))
set.seed(29)
min(runif(42,50,88))
qnorm(0.005, 40, 6.4/sqrt(38))
qnorm(0.995, 40, 6.4/sqrt(38))
pnorm(42.67427,42.8,6.4/sqrt(38))-pnorm(37.32573, 42.8, 6.4/sqrt(38))
z = (98-100)/(8/5)
pvalue = 2*pnorm(z)
x = wooldridge::ceosal1
x
pvalue
2/(8/7)
pnorm(1.76)
pnorm(1.75)
1-pnorm(1.75)
x = file.choose()
ChickWeight
ceosal1
wooldridge::ceosal1
wooldridge::bwght
wooldridge::attend
wooldridge::kielmc
wooldridge::apple
def help():
x <- a
x <- 2
x
function() help()
x <- function()
x <- function(y){}
205 + 106
205 + 106
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
cbind(fruit_matrix, rowSums(fruit_matrix))
source("C:/Users/denni/OneDrive/NTU Y2S2/MH3511/mh3511 wk1.R", echo=TRUE)
X <- c(rep(seq(1, 9, 2), 3))
X
source("C:/Users/denni/OneDrive/NTU Y2S2/MH3511/mh3511 wk1.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#Exercise 2.1
#Exercise 2.2
#Exercise 2.3
number <- 8
if(number < 100){
if(number < 10){
results <- "Single digit"
}
else {
results <- "double digits"
}
}else {
result <- "more than 2 digits"
}
print(paste(number, "is", result))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#Exercise 2.1
#Exercise 2.2
#Exercise 2.3
number <- 8
if(number < 100){
if(number < 10){
result <- "Single digit"
}else {
result <- "double digits"
}
}else {
result <- "more than 2 digits"
}
print(paste(number, "is", result))
paste(number, "is", result)
number <- 22
if(number < 1000){
if(number < 100){
if(number < 10){
result <- "Single digit"
}else {
result <- "double digits"
}
}else {
result <- "triple digits"
}
}else {
result <- "more than 3 digits"
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#Exercise 1.5
poker_winnings <- c(140, -50, 20, -120, 240)
roulette_winnings <- c(-24, -50, 100, -350, 10)
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_winnings) <- days
names(roulette_winnings) <- days
poker_winnings[poker_winnings>0]
daily_winnings <- poker_winnings + roulette_winnings
daily_winnings[daily_winnings>0]
sum(poker_winnings[poker_winnings>0])
sum(roulette_winnings[roulette_winnings>0])
sum(daily_winnings[daily_winnings>0])
#Question 1
X <- c(rep(seq(1, 9, 2), 3))
print(x)
#Question 2
p <- function(x, y){
result <- exp(-y) * y^x / factorial(y)
return (result)
}
p(1, 2)
p(6, 4)
#Question 3
set.seed(3511)
datanorm <- rnorm(50, 2, 4)
ds <- 1.1 ^ (datanorm)
hist(ds, breaks = 8)
#Question 1
X <- c(rep(seq(1, 9, 2), 3))
print(X)
#Question 2
p <- function(x, y){
result <- exp(-y) * y^x / factorial(y)
return (result)
}
p(1, 2)
p(6, 4)
#Question 3
set.seed(3511)
datanorm <- rnorm(50, 2, 4)
ds <- 1.1 ^ (datanorm)
hist(ds, breaks = 8)
test = function(x, theta){
value = exp(-theta)*theta^x/factorial(x)
return(value)
}
test(1,2)
test(6,4)
p <- function(x, y){
result <- exp(-y) * y^x / factorial(y)
return (result)
}
p(1, 2)
p(6, 4)
#Question 2
p <- function(x, y){
result <- exp(-y) * y^x / factorial(x)
return (result)
}
p(1, 2)
p(6, 4)
hist(ds)
#Question 3
set.seed(3511)
datanorm <- rnorm(50, 2, 4)
ds <- 1.1 ^ (datanorm)
hist(ds)
xpt <- seq(0, 3, by=0.1)
n_den <- dnorm(xpt, mean(ds), sd(ds))
ypt <- n_den * length(ds) * 0.2
lines(xpt, ypt, col = "red")
boxplot(ds)
abs(ds - mean(ds)) > 2 * sd(ds)
(ds < quantile(ds, 0.25) - 1.5 * IQR(ds)) |
(ds > quantile(ds, 0.75) + 1.5 * IQR(ds))
sum(abs(ds - mean(ds)) > 2 * sd(ds))
sum((ds < quantile(ds, 0.25) - 1.5 * IQR(ds)) |
(ds > quantile(ds, 0.75) + 1.5 * IQR(ds)))
Student_ID=c(101, 102, 103, 104, 105, 106, 107, 108,
109, 110)
Test1=c(78, 87, 67, 53, 89, 57, 83, 92, 74, 82)
Test2=c(68, 53, 47, 56, 75, 69, 48, 84, 83, 68)
Test3=c(73, 67, 75, 89, 46, 75, 67, 88, 80, 75)
Test4=c(93, 73, 67, 73, 52, 86, 86, 87, 53, 65)
Test5=c(67, 70, 91, 56, 75, 56, 81, 81, 54, 77)
CA_result=data.frame(Student_ID, Test1, Test2, Test3, Test4, Test5)
CA_result
best3_mean <- function(score)
{y=score[order(score,decreasing = TRUE)]
return(mean(y[1:3])) }
best3_ave = apply(CA_result[,2:6],1,best3_mean)
best3_ave
help(score)
help(??score)
f <- function(i){
if(i==floor(i) & i>0){
value=1;
while(i>0){
value=value*i;
i=i-2
};
return(value)
}
else{"undefined"}
}
f(-3)
f(-2.5)
f(10)
f(10.5)
f(11)
package::dataset
package:dataset
package
import package
data("mtcars")
mtcars
iris
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
print(geo_boundary)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
install.packages("stringr")
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
2")
install.packages("sf")
# Installing packages
install.packages("ggplot2")
install.packages("sf")
install.packages("sf")
install.packages("gganimate")
install.packages("transformr")
# Installing packages
install.packages("ggplot2")
# Libraries
library(ggplot2)
library(sf)
library(gganimate)
# Installing packages
# install.packages("ggplot2")
# install.packages("sf")
# install.packages("gganimate")
# install.packages("transformr")
install.packages("av")
library(gganimate)
# Libraries
library(ggplot2)
library(sf)
library(gganimate)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
warnings()
clear
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:\\Users\\denni\\Desktop\\MXB362\\MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("C:/Users/denni/Desktop/MXB362/MXB362.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
